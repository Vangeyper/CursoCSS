
/*
SELECTORES

    Universal: * 
    De Tipo: cualquier sección html
        ej. h1, h2, input
    Clases: .nombreClase
    Identificador: #nombreIdentificador   tiene mas rango de especificidad que la clase => prioridad
    Atributo: [atributo="valor"]
    Descencientes: padre hijo 
        ej. h2 p {...}
        ej. .clase input {...}
        ej. #identificador label {...}
    pseudo-clases: por ejemplo los eventos de una clase
        ej: .clase:hover   siendo hover la pseudoclase


ESPECIFICIDAD

    Conflictos entre estilos aplicados al mismo objeto

    Siempre tiene persistencia el último estilo aplicado, el resto se aplica pero es sobreescrito, de ahí el nombre estilos en cascada, pero solo para elementos de la misma jerarquía,
    para elementos de la misma jerarquía, cuando son diferentes jerarquías se sigue la prioridad:
    
        !important   (indicamos a continuación del estilo, no es recomendable usarlo, caso extremo)
        Estilos en línea    (cuando indicamos dentro del html con style="" el estilo)
        Identificadores
        Clases, pseudo-clases y atributos
        elementos
        pseudo-elementos


METODOLOGIA BEM

    Nos basamos en el nombre de la clase para saber que elemento estamos seleccionando.

    A cada elemento si le aplicamos clase la ponemos con la nomenclatura::after
        class="nombreClaseContenedorOPadre__nombreClaseElemento"

    Ej. <div class="form">
            <input type="text" class="form__input">
            <input type="password" class="form__input">
        </div>
    
    Para los hijos de los hijos ya no se pone __  sino un simple -

    Ej. <div class="form">
            <input type="text" class="form__input">
            <input type="password" class="form__input">
            <p class="form__p"><h2 class="form__p-h2"></h2></p>
        </div>

        .form__p-h2 {
            color: red;            
        }


    Para cambiar al primero de los hijos input del contenedor contact-form::after
 
        .contact-form__input:first-child {
            color: red;            
        }
    
    Uso de --
    Otra forma es tener uno marcado con --marca:

    Ej. <div class="form">
            <input type="text" class="form__input">
            <input type="password" class="form__input--active">
        </div>
    
        .contact-form__input--active {
            color: red;            
        }        


TEORIA DE LAS MEDIDAS (relativas o fijas)
     
        Entre las medidas fijas tenemos:  
            pixeles 5px
            centimetros 5cm
            milimetros 5mm
            puntos 5pt

        Entre las medidas relativas tenemos:
            rem: tiene como referencia el root  
            em:  por defecto equivale a 16px aunque depende del navegador
                 La gracia del em es que su valor se hereda del contenedor, si en el contenedor tenemos un font-size de 20px cuando a un elemento hijo le aplicamos 
                 medidas em tendrá dicho valor como valor por defecto. Esto se aplica a todo lo que requiera medidas: font-size, padding, ...
            vw:  viewport width -> equivale al ancho de pantalla, se le indica un % de la misma. Ej. width: 100vw;   indica toda la pantalla
                 50vw sería el 50% de la pantalla
            vh:  viewport height -> equivale al alto de pantalla, se le indica un % de la misma. Ej. height: 100vh;   indica toda la pantalla
                 50vh sería el 50% de la pantalla
            %:   Indica un porcentaje de la caja que la contiene.



PROPIEDADES DE TEXTOS

    font-size: tamaño de la fuente aplicada
    font-family: familia de la fuente utilizada
    line-height: es el espacio ocupado por 1 letra. La particularidad es que nace del centro de la letra, si aplicamos line-height: 2; crecería media letra por encima 
                 y por debajo de la letra, es decir que al partir del centro crece por ambas partes por igual. No amplia la letra, sino que lo que amplia es el espacio ocupado, en el fondo 
                 haría como los margin - padding 
    font-weight: especifica el grosor aplicado a la fuente, si lo permite



NORMALIZE.css

    Se puede descargar y utilizar para recuperar los valores por defecto de estilos que deberían tener los navegadores:
        <link rel="stylesheet" type="text/css" href="normalize.css">
     
    Añadimos en las imágenes una línea para que las misma ocupen todo el ancho, esto es importante para los móviles:  max-width: 100%;

    img {
        border-style: none;
        max-width: 100%;
    }

    también añadimos para todos los elementos esto: 

    * {
        box-sizing: border-box;
        padding: 0;      con los 0 no hace falta indicar la unidad, porque se multiplica por cero
        margin: 0;
    }

    mantiene siempre la caja contenedora con las medidas establecidas aunque los elementos interiores quieran hacerla crecer.



TEORIA DE CAJAS

    Hay 2 tipos:

        las que son en linea:
            El ancho será el necesario para tener el contenido que le pongamos
            No se puede aplicar height o width, siempre ocupa lo que necesita
        las que son en bloque:
            Son las más grandes
            Se ajustan al ancho de la contenedora

    Para cambiar la disposición de uno a otro tenemos la propiedad display: inline;   display: block;

    


PROPIEDADES DE CAJAS

    background-color
    display: inline-block   --> permite que se comporte como un elemento en línea pero podrá adoptar las propiedades de un bloque.
        PADDING es la distancia entre los textos y los bordes de la caja contenedora.
    padding: 20px;    --> es como darle padding a todo: top, right, bottom y left
    padding: 10px 20px --> le da 10px al top y al bottom, mientras que le da 20px al right y al left
    padding: 30px 40px 50px 20px;   --> damos todos los paddings siendo por orden: top 30px, right 40px bottom 50px y left 20px  --> sigue el movimiento de las agujas del rejoj
    padding-top: 20px;
    padding-left: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    height: 10px; 
    width: 10px;
    box-sizing: content-box;  --> si no ponemos esto los tamaños son la suma de las propiedades, por ejemplo en este caso el height sería de 10px + 20px del padding-top + 20px del padding-bottom
                              --> pero al ponerlo la caja mantiene su tamaño y no crece o disminuye.
        MARGIN es la distancia entre 2 cajas consecutivas, al igual que el padding tiene 4 lados y se puede poner de las mismas formas.                              
        Ojo se aplica en todos los lados de las cajas contenedoras, y en el medio habría doble distancia porque aplicaría el margin o padding de ambas cajas contenedoras. Por eso en el medio se reducen 
        los valores de padding y margin a la mitad:  left y right
        Si ponemos margin: auto; a una caja de tipo block y no está posicionado lo que hacemos es centrarla en pantalla.
        Este centrado solo vale para el eje horizontal, no pasa con el eje de las Y
    margin: 20px; 
    margin: 10px 20px --> le da 10px al top y al bottom, mientras que le da 20px al right y al left
    margin: 30px 40px 50px 20px;   --> damos todos los margins siendo por orden: top 30px, right 40px bottom 50px y left 20px  --> sigue el movimiento de las agujas del rejoj
    margin-top: 20px;
    margin-left: 20px;
    margin-right: 20px;
    margin-bottom: 20px;
    border-radius: 10px;   --> indica el redondeado de las esquinas de las cajas contenedoras
    border-radius: 50%;   --> redondea toda la caja creando una circunferencia
    border: 4px solid blue  --> se indica el grueso del borde, el estilo y el color
    
    box-shadow: 2px 4px 15px 1px color;   --> es para dar sombra a la caja, siendo por orden los datos: desplazamiento para el lado, desplazamiento para abajo, difuminado, relleno y color 
    text-shadow: 2px 4px 15px color;  --> es para dar sombra al texto, siendo por orden los datos: desplazamiento para el lado, desplazamiento para abajo, difuminado y color 
        En ambos sombreados si queremos darle más intensidad basta con copiarlo y repetirlo separado por comas
    box-shadow: 2px 4px 15px 1px color, 2px 4px 15px 1px color;
    text-shadow: 2px 4px 15px color, 2px 4px 15px color; 

    transform: rotate(90deg);  es una función que se le pasa los grados como parámetros. Puede ser negativo para el efecto contrario de rotación.


OUTLINE:
    Es como un border pero no afecta al DOM, realmente no está dentro del DOM como lo estaría border. Es como un resaltado que no afecta a las posiciones de 
    los elementos, ni siquiera a la caja que lo utiliza.
    Aunque tengamos el box-sizing en cualquiera de sus opciones no reducirá ni hará grande la caja afectada, solo la remarcará sin mover el resto de elementos.
    El Outline tiene en cuenta el Z-Index de los elementos a la hora de pintar, por lo que pueden quedar ocultos algunos de los lados del resaltado si las cajas colindantes son más cercanas a la superficie.


POSITION:
    Permite posicionar un elemento. Este elemento adquiere nuevas propiedades como: top, right, left, bottom, z-index, ...
    Opciones posibles:
        Static: valor por defecto. Significa que NO está posicionado.
        Relative: 
            El espacio reservado por el elemento originalmente se convervará aunque se traslade a otra ubicación, y el resto de elementos no ocuparán su lugar.
            El elemento adquiere las propiedades top, left, right y bottom que se corresponden en sus origenes con los de la caja.
            Importante: si indicamos top o left tendrán prioridad sobre la propiedad bottom y right, ignorando estas últimas.            
        Absolute:
            El espacio reservado para el elemento deja de estarlo y pasa a ser ocupado por el próximo elemento.
            Las coordenadas de posicionamiento serán referidas al contenedor o al viewport si no tiene. Ya no serán referidas al origen de la caja como en el relative.
            El viewport es todo lo que podemos ver en pantalla, si apretamos F11 lo vemos.
            El ancho de los elementos con position: absolute; aunque sea una caja de tipo block pasará a ajustarse al contenido, si la queremos más grande habrá que indicarlo con medidas.
            El elemento contenedor debe estar posicionado, no vale como static. Si es static entonces los elementos contenidos tomarán como referencia al viewport para posicionarse como absolute.
        Fixed:
            Es igual en todo que el absolute, pero además tiene la particularidad que no se mueve nunca de la zona de pantalla aunque se realice scroll en la pantalla.
            En todo lo demás es igual. 
        Sticky:
            Es como una mezcla de Relative y Fixed: se comporta como el fixed, pero además mantiene el hueco ocupado no permitiendo que otros elementos se superpongan.
            El Sticky no se queda fijado cuando hacemos scroll se mueve con él hasta que llega al top indicado o a la posición indicada si no la tenía de origen.


Z-INDEX: 
    Orden de los elementos visualmente en el eje Z. Dicho de otra manera el que tenga el valor z-index más alto estará más cercano a nuestra vista y se verá por delante del resto de elementos con menor z-index.
    Esta propiedad se adquiere cuando la caja está posicionada, en el caso de position: static no existe o no tiene efecto.
    Tener en cuenta que por el hecho de estar posicionados aparecerán antes que otros elementos los últimos en pintarse, por efecto del orden de flujo al pintarse.
    Por defecto si no está posicionada tiene valor 0.
    En ese caso se tiene en cuenta el orden en que se pinta.
    Para poder agregar elementos nuevos y ordenarlos visualmente se recomienda poner incrementos de 50 o 100 en cada nuevo elemento z-index, asi podemos añadir elementos nuevos en medio.
    En el caso de contenedores padres e hijos, para que un hijo sea superado por el padre visualmente tenemos que ponerle un z-index: -1; al hijo y tener a ambos posicionados. En el padre no podemos tener ningún z-index definido para que funcione.


PROPIEDAD DISPLAY:
    Modifica el comportamiento de las diferentes cajas.
    Tiene muchas opciones posibles:
        (todas las opciones referentes a tablas están en deshuso)
        block -> 
            se comporta como bloque la caja ocupando todo el ancho de su contenedor
            no podemos poner una caja al lado de otra
        inline -> 
            solo ocupa el ancho que necesita para mostrar su contenido
            podemos poner cajas una al lado de otra
        inline-block -> 
            bloque en el que podemos cambiar las dimensiones de la caja
            podemos poner una caja al lado de otra 
        table ->
            que se comporte como una tabla
        inline-table ->
            que se comporte como una tabla en linea
        list-item ->
            lista de items
        table-cell ->
            es como una celda
        table-row ->
            es como una fila
        table-column ->
            es como una columna
        flex ->
        inline-flex ->
        grid ->       
        inline-grid ->


OVERFLOW:
    Indica qué hacemos con el contenido que desborda el contenedor. 
    Opciones:
        visible: es la que tenemos por defecto. Simplemente se pinta fuera de la caja contenedora
        auto: si sobresale aplica scroll
        scroll: sobresalga o no nos pone las barritas de scroll
        hidden: permite ocultar lo que sobresale y también quita el scroll forzado en el otro eje que hace que por defecto aparezca en este
            ej. overflow-x: scroll;
                overflow-y: hidden;
    Esta propiedad es un ShortHand: podemos referirnos al eje X y al eje Y con overflow-x y overflow-y


FLOAT:
    Opciones: right, left, none, inherit
    En este ejemplo de estilos podemos ver como el texto envuelve a la imagen mediante el uso de float: right; o float: left;


PSEUDO-ELEMENTOS:
    Algunos pseudo-elementos no forman parte del DOM, pero podemos ver cambios visuales como el outline. Los pseudo-elementos que requieren de la etiqueta content no forman parte del DOM.
    Se aplican a un elemento existente.
    La sintaxis en el selector es:  nombreDelElemento::pseudoElemento
        ej.
            .texto::first-line { ... }

    ::first-line -> 
        Si que forma parte del DOM.
        No funciona en elementos inline puro, si en inline-block
        los estilos aplicados a la primera linea serán independientes del ancho de la pantalla, solo afectará a la primera línea formada en cada viewport
    ::first-letter ->
        Si que forma parte del DOM.
        Mismo funcionamiento que para first-line pero afectando solo a la primera letra  
    ::placeholder ->
        Texto que aparece en el input. Por defecto tiene unas propiedades: color grisáceo, ...
        Podemos cambiar estas propiedades haciendo referencia al pseudo-elemento placeholder
    ::after  
        No forma parte del DOM.
        Necesita de la propiedad content.
        Se refiere a los hijos del content
        Añade contenido después del elemento afectado por el pseudo-elemento. No admite etiquetas en el texto
        IMPORTANTE: este elemento al no formar parte del DOM no podemos inspeccionarlo ni seleccionarlo en pantalla
    ::before  
        No forma parte del DOM.
        Necesita de la propiedad content.
        Se refiere a los hijos del content
        Añade contenido antes del elemento afectado por el pseudo-elemento. No admite etiquetas en el texto
        IMPORTANTE: este elemento al no formar parte del DOM no podemos inspeccionarlo ni seleccionarlo en pantalla
    ::selection ->
        Permite modificar el estilo de los textos seleccionados


PSEUDO-CLASES:
    Son o permiten escuchar eventos sobre los elementos seleccionados.
    Opciones:

    :hover -> 
        cuando el ratón pasa por encima del elemento
    :link ->
        cambiar un link aplicando un estilo, solo si no hemos visitado dicho link. Sería cambiar el estilo de los NO VISITADOS
    :visited ->
        cambiar un link aplicando un estilo, solo si hemos visitado dicho link. Sería cambiar el estilo de los YA VISITADOS
    NOTA: el link y el visited se aplican a elementos de tipo <a> y tienen prioridad sobre los propios elementos <a> salvo que indiquemos el !important a la propiedad
    :active ->
        se aplicará el estilo al elemento al que afecta cuando le demos un click a dicho elemento haciendolo activo en ese momento, Una vez soltemos el click dejará de estar activo y volverá a su estilo normal
        podemos darle una transición con el transition del elemento afectado
    :focus ->
        estilo cuando el elemento tiene el foco de la app
        por ejemplo si es un input podemos escribir en él y hasta que hagamos un lostfocus se aplicará el estilo
    :lang() ->
        se aplica el estilo a todos los elementos que estén marcados con el atributo lang="idioma"
        ej. en el elemento 
            <b lang="es">¿hola como estás?</b>
        en el style
            b:lang(es) {
                padding: 20px;
            }    


OBJECT-FIT:
    Se aplica a las imágenes:
    contain ->
        la imagen se ajusta hasta que una de las dimensiones llega al contenedor, width o height. Quedando el resto del otro eje sin cubrir por la imagen.
    cover ->
        la imagen se ajusta al contenedor completamente, manteniendo la escala y recortando lo que salga del contenedor
    none ->
        ningun efecto, mantiene la resolución original en el contenedor
    scale-down ->
        compara la imagen de contain y de none y se queda con el más pequeño


OBJECT-POSITION:
    permite ubicar la imagen de un determinado lado cortándose por el resto de lados. Esta opción se puede combinar con la de object-fit para conseguir mantener el trozo de imagen que queremos en pantalla cuando no cabe toda la imagen
    Left - Right - Top - Bottom

    también podemos indicarle medidas mediante: px - em - % - etc
    estas medidas pueden ser negativas para conseguir el efecto en sentido contrario


CURSOR:
    permite cambiar el cursor del elemento que estamos modelando en estilo. Podemos hacerlo en pseudo-clases y demás estilos.
    ej. 
            cursor: pointer;
            cursor: row-resize;  esta vale para permitir cambiar la anchura o altura del elemento

    algunos cursores: pointer, copy, progress, 
    la lista de cursores podemos verla en: https://www.w3schools.com/cssref/tryit.asp?filename=trycss_cursor


COLORES:
    La lista de colores CSS la podemos ver en https://www.mclibre.org/consultar/htmlcss/css/css-color.html
    Los colores se pueden indicar de muchas formas:
        1. Por el nombre 
        2. En hexadecimal 
        3. rgb 
        4. rgba 
        5. hsl
        6. hsla
    
    ej.
            Red
            #FF0000
            rgb(255 0 0)
            hsl(0 100% 50%)
            hwb(0 0% 0%)

    Los colores primarios en informática son RGB: rojo, verde y azul, no como en el arte que serían: rojo, azul y amarillo
    rgb(r, g, b) donde 
        r es la cantidad de red de 0 a 255
        g es la cantidad de green de 0 a 255
        b es la cantidad de blue de 0 a 255
    los colores extremos son:
        rgb(0,0,0) es negro
        rgb(255,255,255) es blanco
    la curiosidad es que mezclando rojo y verde sale amarillo, esto no pasaría en la vida real
    Los grises se hacen con todos los colores en el mismo nivel
    rgba(r, g, b, a) es lo mismo que rgb, pero podemos indicarle la opacidad del color en el cuarto parámetro
    al hacer un color mas transparente se verá influenciado por el color que hubiese debajo del mismo.
    La opacidad son valores del 0 al 1, siendo el 0 el más transparente o el menos opaco.
    En hexadecimal podemos indicarlo con 3 caracteres o con 6, con más o menos no funcionaría.
    Si indicamos 4 u 8 valores es para indicar la opacidad como en el rgba. Es decir el último indicador sería la opacidad:
        #fff -> r(f), g(f), b(f)
        #ffff -> r(f), g(f), b(f), a(f)
        #ffffff -> r(ff), g(ff), b(ff)
        #ffffffff -> r(ff), g(ff), b(ff), a(ff)


RESPONSIVE DESIGN - MOBILE FIRST
    Responsive es adaptar de escritorio a tablet o mobile
    Mobile first es adaptar desde el mobil a tablet y luego escritorio

    Para esto se usa el mediaquery:
        sintaxis: @media only screen and(max-width: 800px) { ... }
        este media query lo que hace es que cuando la pantalla alcance dimensiones 800px o menos se aplicarán los estilos indicados entre llaves

    Importante: para que coja las dimensiones reales del dispositivo hay que añadir el meta siguiente en el head de la página:
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    

TRANSITION:
    Establece el tiempo que ha de pasar desde el punto original hasta el final de un evento o cambio.
    ej. 
        transition: background 1s, height 1s, width .2s;
    Se puede indicar el evento o atributo afectado de forma explícita como en el ejemplo
    Si queremos que todos los atributos se cambien en el mismo tiempo:
    ej.
        transition: all 1s;




NOTA DE HTML

    Si pones 2 elementos en líneas diferentes automaticamente aunque el margin sea 0 deja un espacio entre las cajas contenedoras, 

        ej.
            <h2>Primera Caja</h2>
            <h2>Segunda Caja</h2>

    En cambio si las ponemos en la misma línea no dejará espacio::after

        ej.
            <h2>Primera Caja</h2><h2>Segunda Caja</h2>

    Opacity: indica la transparencia de un elemento, siendo 1 totalmente opaco y 0 totalmente transparente.
        ej.
            opacity: .5;  la mitad de transparencia

    Tipos de Input: <input type="text" />
        text   -> texto normal
        password -> texto protegido para contraseñas
        range  -> permite introducir un rango
        color  -> permite introducir un color


NOTAS DE WINDOWS

    Tecla de windows + flecha izquierda o flecha derecha: permite trabajar con la app activa en media pantalla


*/


* {
    font-family: 'Lobster', cursive;
    font-weight: 100;
    font-size: 30px;
}


div {
    width: 45%;
    display: inline-block;
    padding: 20px;
    background: #ddd;
}

h1 {
    font-size: 24px;
}

.caja2 {
    background: #bbb;
}

@media(max-width: 800px) {
    
    div {
        display: block;
        width: 100%;        
    }

    h1 {
        font-size: 1em !important; 
    }

    p {
        font-size: .6em;
    }

}